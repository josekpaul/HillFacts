@using System.ComponentModel
@using System.Data
@inject IMembersViewModel ViewModel

<h1>@CurrentChamber Members</h1>

@if (ViewModel.FilteredMembers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input @bind="ViewModel.Filter" placeholder="press enter after filter-text. If 2 characters, filters for state. Else, for name" class="form-control mb-2" />
    <BSTabGroup>
        <BSTabList>
            <BSTab>
                <BSTabLabel>Table</BSTabLabel>
                <BSTabContent>
                    <div class="table-responsive">

                        <table class="table table-striped">
                            <thead class="thead-light">
                                <tr>
                                    <th></th>
                                    <th class="align-bottom text-center">
                                        State<br />
                                        <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.StateAsc)"></BSIcon>
                                        <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.StateDesc)"></BSIcon>

                                    </th>
                                    @if (CurrentChamber == Chamber.Senate)
                                    {
                                        <th>
                                            Next Election
                                            <br />
                                            <div style="width:40px">
                                                <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.ElectionYearAsc)"></BSIcon>
                                                <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.ElectionYearDesc)"></BSIcon>


                                            </div>
                                        </th>
                                    }
                                    <th>
                                        Age
                                        <br />
                                        <div style="width:40px">
                                            <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.AgeAsc)"></BSIcon>
                                            <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.AgeDesc)"></BSIcon>
                                        </div>
                                    </th>
                                    <th>
                                        Seniority
                                        <br /><div style="width:40px">
                                            <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.SeniorityAsc)"></BSIcon>
                                            <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.SeniorityDesc)"></BSIcon>
                                        </div>
                                    </th>
                                    <th>
                                        % Votes with Party
                                        <br /><div style="width:40px">
                                            <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.PercentPartyVoteAsc)"></BSIcon>
                                            <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.PercentPartyVoteDesc)"></BSIcon>
                                        </div>
                                    </th>
                                    <th>
                                        % Votes Missed
                                        <br /><div style="width:40px">
                                            <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.PercentVoteMissAsc)"></BSIcon>
                                            <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.PercentVoteMissDesc)"></BSIcon>
                                        </div>
                                    </th>
                                    <th>
                                        Missed Votes
                                        <br /><div style="width:40px">
                                            <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.MissedVotesAsc)"></BSIcon>
                                            <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.MissedVotesDesc)"></BSIcon>
                                        </div>
                                    </th>
                                </tr>
                            </thead>

                            <tbody>

                                @foreach (var member in ViewModel.FilteredMembers)
                                {
                                    <BSCollapseItem>
                                        <tr>
                                            <td>
                                                <BSCollapseToggle>
                                                    @(context ? "-":"+")
                                                </BSCollapseToggle>
                                                @if (!string.IsNullOrEmpty(member.TwitterAccount))
                                                {
                                                    <a target="_blank" href="http://twitter.com/@(member.TwitterAccount)">
                                                        <img src="images/twitter24x24.png" />
                                                    </a>
                                                }
                                                else
                                                { <img src="images/24x24.png" />}
                                                @if (!string.IsNullOrEmpty(member.FacebookAccount))
                                                {
                                                    <a target="_blank" href="http://facebook.com/@(member.FacebookAccount)">
                                                        <img src="images/fb24x24.png" />
                                                    </a>
                                                }
                                                else
                                                { <img src="images/24x24.png" />}
                                                <span class="badge badge-info party-@(member.Party.ToLower())-background">@member.Party</span>
                                                <a href="MemberDetail/@member.Id">@($"{member.FirstName} {member.LastName}")</a>
                                                @($" {member.LeadershipRole}")
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(member.District))
                                                {
                                                    <a class="mr-2" target="_blank" href="https://www.govtrack.us/congress/members/@(member.State)#map">District @member.District</a>
                                                }
                                                @member.State
                                            </td>
                                            @if (CurrentChamber == Chamber.Senate)
                                            {
                                                <td>
                                                    @member.NextElection
                                                </td>
                                            }
                                            <td>
                                                @(CurrentYear - member.DateOfBirth.Year)
                                            </td>
                                            <td>
                                                @member.Seniority
                                            </td>
                                            <td>
                                                @member.PercentageOVotesWithParty
                                            </td>
                                            <td>
                                                @member.PercentageOfVotesMissed
                                            </td>
                                            <td>
                                                @member.MissedVotes
                                            </td>
                                        </tr>
                                        <BSCollapse>
                                            <tr>
                                                <td>
                                                    Senator from @member.State, ranked @(member.Seniority). Voted a total of @member.TotalVotes, missed @(member.MissedVotes). Next election at @member.NextElection<br />
                                                    Office at @member.Office<br />
                                                    #TEL @member.Phone<br />
                                                </td>
                                            </tr>
                                            @*<BSCard CardType="CardType.Card">
                                    <BSCard CardType="CardType.Body">
                                        <BSCard CardType="CardType.Text">
                                            @senator.Office
                                        </BSCard>
                                    </BSCard>
                                </BSCard>*@
                                        </BSCollapse>
                                    </BSCollapseItem>
                                }
                            </tbody>
                        </table>
                    </div>
                </BSTabContent>
            </BSTab>
            <BSTab>
                <BSTabLabel>Charts</BSTabLabel>
                <BSTabContent>
                    <div class="row mt-2">
                        <div class="col-md-8">
                            <h6>Next Election Year</h6>
                            <D3Visualizations.Components.StackedColumnChart Data="@MembersElectionYearByParty" OnClick="(msg) => SetElectionYearDisplayData(msg)"></D3Visualizations.Components.StackedColumnChart>
                        </div>
                        @if (ElectionYearDisplayData != null)
                        {
                            <div class="col-md-4 p-1 scrollcontainer-h-450">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <tbody>
                                            @foreach (var m in ElectionYearDisplayData)
                                            {
                                                <tr><td>@m.FirstName @m.LastName (@m.Party, @m.District @m.State): @m.NextElection</td></tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-8">
                            <h6>Seniority by Party</h6>
                            <D3Visualizations.Components.StackedColumnChart Data="@MemberSeniorityByParty" OnClick="(msg) => SetSeniorityDisplayData(msg)"></D3Visualizations.Components.StackedColumnChart>
                        </div>
                        @if (SeniorityDisplayData != null)
                        {
                            <div class="col-md-4 p-1 scrollcontainer-h-450">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <tbody>
                                            @foreach (var m in SeniorityDisplayData)
                                            {
                                                <tr><td>@m.FirstName @m.LastName (@m.Party, @m.District @m.State): @m.Seniority</td></tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-8">
                            <h6>Member Age by Party</h6>
                            <D3Visualizations.Components.StackedColumnChart Data="@MemberAgeByParty" OnClick="(msg) => SetAgeDisplayData(msg)"></D3Visualizations.Components.StackedColumnChart>
                        </div>
                        @if (AgeDisplayData != null)
                        {
                            <div class="col-md-4 p-1 scrollcontainer-h-450">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <tbody>
                                            @foreach (var m in AgeDisplayData)
                                            {
                                                <tr><td>@m.FirstName @m.LastName (@m.Party, @m.District @m.State): @(CurrentYear - m.DateOfBirth.Year) (DOB: @m.DateOfBirth.ToShortDateString())</td></tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </div>
                </BSTabContent>
            </BSTab>
        </BSTabList>
        <BSTabSelectedContent />
    </BSTabGroup>
}


@code {
    [Parameter] public Chamber CurrentChamber { get; set; }
    int CurrentYear = DateTime.Today.Year;

    public DataTable MembersElectionYearByParty { get; set; }
    public DataTable MemberSeniorityByParty { get; set; }
    public DataTable MemberAgeByParty { get; set; }

    IEnumerable<MemberSummary> ElectionYearDisplayData { get; set; }
    void SetElectionYearDisplayData(string msg)
    {
        var d = msg.Split("|");
        var year = int.Parse(d[0]);
        var party = d[1].Substring(0, 1);
        ElectionYearDisplayData = ViewModel.FilteredMembers.Where(m => m.NextElection == year && m.Party == party);
    }

    IEnumerable<MemberSummary> SeniorityDisplayData { get; set; }
    void SetSeniorityDisplayData(string msg)
    {
        var d = msg.Split("|");
        var seniority = (d[0].Substring(1,1) == "1")?int.Parse(d[0].Substring(0,1)):0;
        var party = d[1].Substring(0, 1);
        SeniorityDisplayData = ViewModel.FilteredMembers
            .Where(m => m.Seniority > seniority*10 && m.Seniority <= (seniority+1)*10 && m.Party == party)
            .OrderBy(m => m.Seniority);
    }

    IEnumerable<MemberSummary> AgeDisplayData { get; set; }
    void SetAgeDisplayData(string msg)
    {
        var d = msg.Split("|");
        var age = (d[0].Substring(1, 1) == "1") ? int.Parse(d[0].Substring(0, 1)) : 0;
        var party = d[1].Substring(0, 1);
        AgeDisplayData = ViewModel.FilteredMembers
            .Where(m => CurrentYear - m.DateOfBirth.Year > age * 10 && CurrentYear - m.DateOfBirth.Year <= (age + 1) * 10 && m.Party == party)
            .OrderBy(m => CurrentYear - m.DateOfBirth.Year);
    }

    async void OnPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == "FilteredMembers")
        {
            var electionYears = ViewModel.FilteredMembers.GroupBy(m => m.NextElection).OrderBy(y => y.Key);
            DataTable dt = new DataTable();
            dt.Columns.Add("Year");
            dt.Columns.Add("Democrat");
            dt.Columns.Add("Republican");
            dt.Columns.Add("Other");

            foreach (var year in electionYears)
            {
                dt.Rows.Add(year.Key,
                    year.Where(y => y.Party == "D").Count(),
                    year.Where(y => y.Party == "R").Count(),
                    year.Where(y => y.Party != "D" && y.Party != "R"));
            }
            MembersElectionYearByParty = dt;

            var seniority = ViewModel.FilteredMembers.GroupBy(m => m.Seniority / 10).OrderBy(g => g.Key) ;
            var dt1 = new DataTable();
            dt1.Columns.Add("Seniority");
            dt1.Columns.Add("Democrat");
            dt1.Columns.Add("Republican");
            dt1.Columns.Add("Other");

            foreach (var year in seniority)
            {
                dt1.Rows.Add($"{year.Key * 10 + 1} - {(year.Key + 1)*10}",
                    year.Where(y => y.Party == "D").Count(),
                    year.Where(y => y.Party == "R").Count(),
                    year.Where(y => y.Party != "D" && y.Party != "R"));
            }
            MemberSeniorityByParty = dt1;

            var age = ViewModel.FilteredMembers.GroupBy(m => (CurrentYear - m.DateOfBirth.Year) / 10).OrderBy(g => g.Key);
            var dt2 = new DataTable();
            dt2.Columns.Add("Age");
            dt2.Columns.Add("Democrat");
            dt2.Columns.Add("Republican");
            dt2.Columns.Add("Other");

            foreach (var year in age)
            {
                dt2.Rows.Add($"{year.Key * 10 + 1} - {(year.Key + 1) * 10}",
                    year.Where(y => y.Party == "D").Count(),
                    year.Where(y => y.Party == "R").Count(),
                    year.Where(y => y.Party != "D" && y.Party != "R"));
            }
            MemberAgeByParty = dt2;


        }
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    protected override Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += OnPropertyChangedEventHandler;
        ViewModel.CurrentChamber = CurrentChamber;
        ViewModel.GetMembers();
        return base.OnInitializedAsync();
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChangedEventHandler;
    }

}
