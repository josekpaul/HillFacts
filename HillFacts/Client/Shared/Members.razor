@using System.ComponentModel
@inject IMembersViewModel ViewModel

<h1>@CurrentChamber Members</h1>

@if (ViewModel.FilteredMembers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input @bind="ViewModel.Filter" placeholder="press enter after filter-text. If 2 characters, filters for state. Else, for name" class="form-control mb-2" />
    <div class="table-responsive">

        <table class="table table-striped">
            <thead class="thead-light">
                <tr>
                    <th></th>
                    <th class="align-bottom text-center">
                        State<br />
                        <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.StateAsc)"></BSIcon>
                        <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.StateDesc)"></BSIcon>

                    </th>
                    @if (CurrentChamber == Chamber.Senate)
                    {
                        <th>
                            Next Election
                            <br />
                            <div style="width:40px">
                                <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.ElectionYearAsc)"></BSIcon>
                                <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.ElectionYearDesc)"></BSIcon>


                            </div>
                        </th>
                    }
                    <th>
                        Age
                        <br />
                        <div style="width:40px">
                            <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.AgeAsc)"></BSIcon>
                            <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.AgeDesc)"></BSIcon>
                        </div>
                    </th>
                    <th>
                        Seniority
                        <br /><div style="width:40px">
                            <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.SeniorityAsc)"></BSIcon>
                            <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.SeniorityDesc)"></BSIcon>
                        </div>
                    </th>
                    <th>
                        % Votes with Party
                        <br /><div style="width:40px">
                            <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.PercentPartyVoteAsc)"></BSIcon>
                            <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.PercentPartyVoteDesc)"></BSIcon>
                        </div>
                    </th>
                    <th>
                        % Votes Missed
                        <br /><div style="width:40px">
                            <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.PercentVoteMissAsc)"></BSIcon>
                            <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.PercentVoteMissDesc)"></BSIcon>
                        </div>
                    </th>
                    <th>
                        Missed Votes
                        <br /><div style="width:40px">
                            <BSIcon Name="@(BSIcon.Names.arrow_up_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.MissedVotesAsc)"></BSIcon>
                            <BSIcon Name="@(BSIcon.Names.arrow_down_square_fill)" @onclick="(s=> ViewModel.Sort = MembersSortCriteria.MissedVotesDesc)"></BSIcon>
                        </div>
                    </th>
                </tr>
            </thead>

            <tbody>

                @foreach (var member in ViewModel.FilteredMembers)
                {
                    <BSCollapseItem>
                        <tr>
                            <td>
                                <BSCollapseToggle>
                                    @(context ? "-":"+")
                                </BSCollapseToggle>
                                @if (!string.IsNullOrEmpty(member.TwitterAccount))
                                {
                                    <a target="_blank" href="http://twitter.com/@(member.TwitterAccount)">
                                        <img src="images/twitter24x24.png" />
                                    </a>
                                }
                                else
                                { <img src="images/24x24.png" />}
                                @if (!string.IsNullOrEmpty(member.FacebookAccount))
                                {
                                    <a target="_blank" href="http://facebook.com/@(member.FacebookAccount)">
                                        <img src="images/fb24x24.png" />
                                    </a>
                                }
                                else
                                { <img src="images/24x24.png" />}
                                <span class="badge badge-info party-@(member.Party.ToLower())-background">@member.Party</span>
                                <a href="MemberDetail/@member.Id">@($"{member.FirstName} {member.LastName}")</a>
                                @($" {member.LeadershipRole}")
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(member.District))
                                {
                                    <a class="mr-2" target="_blank" href="https://www.govtrack.us/congress/members/@(member.State)#map">District @member.District</a>
                                }
                                @member.State
                            </td>
                            @if (CurrentChamber == Chamber.Senate)
                            {
                                <td>
                                    @member.NextElection
                                </td>
                            }
                            <td>
                                @(CurrentYear - member.DateOfBirth.Year)
                            </td>
                            <td>
                                @member.Seniority
                            </td>
                            <td>
                                @member.PercentageOVotesWithParty
                            </td>
                            <td>
                                @member.PercentageOfVotesMissed
                            </td>
                            <td>
                                @member.MissedVotes
                            </td>
                        </tr>
                        <BSCollapse>
                            <tr>
                                <td>
                                    Senator from @member.State, ranked @(member.Seniority). Voted a total of @member.TotalVotes, missed @(member.MissedVotes). Next election at @member.NextElection<br />
                                    Office at @member.Office<br />
                                    #TEL @member.Phone<br />
                                </td>
                            </tr>
                            @*<BSCard CardType="CardType.Card">
                                    <BSCard CardType="CardType.Body">
                                        <BSCard CardType="CardType.Text">
                                            @senator.Office
                                        </BSCard>
                                    </BSCard>
                                </BSCard>*@
                        </BSCollapse>
                    </BSCollapseItem>
                }
            </tbody>
        </table>
    </div>
}


@code {
    [Parameter] public Chamber CurrentChamber { get; set; }
    int CurrentYear = DateTime.Today.Year;

    async void OnPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    protected override Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += OnPropertyChangedEventHandler;
        ViewModel.CurrentChamber = CurrentChamber;
        ViewModel.GetMembers();
        return base.OnInitializedAsync();
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChangedEventHandler;
    }

}
