@page "/memberdetail/{Id}"
@using JSEmbed.Services
@using System.ComponentModel
@inject IMemberDetailViewModel ViewModel
@if (ViewModel.Member != null)
{
    <h2>@ViewModel.Member.FirstName @ViewModel.Member.LastName</h2>
    <hr />
}
<div class="row">
    <div class="col-md-3 scrollcontainer-h-900">
        @if (!string.IsNullOrWhiteSpace(ViewModel.Member?.TwitterAccount))
        {
            <a class="twitter-timeline" href="https://twitter.com/@(ViewModel.Member.TwitterAccount)?ref_src=twsrc%5Etfw">Tweets by @(ViewModel.Member.TwitterAccount)</a>
        }
    </div>
    <div class="col-md-9">
        @if (ViewModel.Member != null)
        {
            <p>Born on @(ViewModel.Member.DateOfBirth.ToShortDateString()). @ViewModel.Member.TimesTopicsUrl </p>
            {
                var currentRole = ViewModel.Member.Roles.Where(r => r.Congress == 116).FirstOrDefault();
                if (currentRole != null)
                {
                    <p>@currentRole.Chamber @currentRole.District @currentRole.State <small>@currentRole.StartDate.ToShortDateString() - @currentRole.EndDate.ToShortDateString()</small> </p>
                    <p>
                        Sponsored @currentRole.BillSponsoredCount bills.
                        Co-sponsored @currentRole.BillCosponsoredCount bills.
                    </p>
                    foreach (var committee in currentRole.Committees)
                    {
                        <span>@committee.Name : @committee.RankInParty</span>
                        <br />
                    }
                }
            }
        }
        else
        {
            <span>Loading..</span>
        }
        <hr />

        <h4>Recent Bills </h4>
        @if (ViewModel.RecentSponsoredBills != null)
        {
            var sponsoredBillGroups = ViewModel.RecentSponsoredBills.Bills.GroupBy(b => b.PrimarySubject);

            foreach (var subjectGroup in sponsoredBillGroups)
            {
                <span class="badge badge-info">@subjectGroup.Key: @subjectGroup.Count()</span>
            }

            foreach (var g in ViewModel.RecentSponsoredBills.Bills)
            {
                <div class="row p-1">
                    <div class="col-1">@g.DateIntroduced.ToShortDateString()</div>
                    <div class="col-2">@g.PrimarySubject</div>
                    <div class="col-6">@g.BillTitle</div>
                    <div class="col-3">@g.LatestMajorAction (@g.DateLatestMajorAction.ToShortDateString())</div>
                </div>
            }
        }
        else
        {
            <span>Loading Bill information..</span>
        }
    </div>
</div>

@code {
    [Parameter] public string Id { get; set; }
    [Inject]
    public JSEmbedService JSEmbedService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += OnPropertyChangedEventHandler;
        ViewModel.MemberId = Id;
        await ViewModel.GetMemberDetail();

        if (!string.IsNullOrWhiteSpace(ViewModel.Member?.TwitterAccount))
        {
            await JSEmbedService.RunRemoteJS("https://platform.twitter.com/widgets.js");
        }
    }

    async void OnPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChangedEventHandler;
    }


}
